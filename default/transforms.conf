# TA-wg

# extraction for printk() format %pISpfsc: IPv4/6 plus port, flowinfo and/or scope
# \[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?

## cookie.c

[wg_cookie-decrypt-invalid]
# "%s: Could not decrypt invalid cookie response\n", wg->dev->name
REGEX = wireguard:\s(?<device>[^:]+):\sCould\snot\sdecrypt\sinvalid\scookie
FORMAT = action::drop class::cookie level::ERROR

## device.c

[wg_device-invalid-ip-packet]
# "%s: Invalid IP packet\n", dev->name
REGEX = wireguard:\s(?<device>[^:]+):\sInvalid\sIP\spacket
FORMAT = action::drop class::network level::ERROR

[wg_device-ip-no-match]
# "%s: No peer has allowed IPs matching %pI4\n", dev->name, &ip_hdr(skb)->daddr
# "%s: No peer has allowed IPs matching %pI6\n", dev->name, &ipv6_hdr(skb)->daddr
REGEX = wireguard:\s(?<device>[^:]+):\sNo\speer\shas\s\allowed\sIPs\smatching\s(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))
FORMAT = action::drop class::network level::ERROR

[wg_device-no-valid-endpoint]
# "%s: No valid endpoint has been configured or discovered for peer %llu\n", dev->name, peer->internal_id
REGEX = wireguard:\s(?<device>[^:]+):\sNo\svalid\sendpoint\shas\sbeen\sconfigured\sor\sdiscovered\sfor\speer\s(?<peer>\d+)
FORMAT = action::drop class::network level::ERROR

[wg_device-interface-destroyed]
# "%s: Interface destroyed\n", dev->name
REGEX = wireguard:\s(?<device>[^:]+):\sInterface\sdestroyed
FORMAT = action::destroy class::network level::INFO

[wg_device-interface-created]
# "%s: Interface created\n", dev->name
REGEX = wireguard:\s(?<device>[^:]+):\sInterface\screated
FORMAT = action::create class::network level::INFO

## noise.c

[wg_noise-keypair-destroyed]
# "%s: Keypair %llu destroyed for peer %llu\n", keypair->entry.peer->device->dev->name, keypair->internal_id, keypair->entry.peer->internal_id
REGEX = wireguard:\s(?<device>[^:]+):\sKeypair\s(?<keypair>\d+)\sdestroyed\sfor\speer\s(?<peer>\d+)
FORMAT = action::destroy class::keypair level::INFO

[wg_noise-keypair-created]
# "%s: Keypair %llu created for peer %llu\n", handshake->entry.peer->device->dev->name, new_keypair->internal_id, handshake->entry.peer->internal_id
REGEX = wireguard:\s(?<device>[^:]+):\sKeypair\s(?<keypair>\d+)\screated\sfor\speer\s(?<peer>\d+)
FORMAT = action::create class::keypair level::INFO

## peer.c

[wg_peer-created]
# "%s: Peer %llu created\n", wg->dev->name, peer->internal_id
REGEX = wireguard:\s(?<device>[^:]+):\sPeer\s(?<peer>\d+)\screated
FORMAT = action::create class::peer level::INFO

[wg_peer-destroyed]
# "%s: Peer %llu (%pISpfsc) destroyed\n", peer->device->dev->name, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sPeer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\) destroyed
FORMAT = action::destroy class::peer level::INFO

## receive.c

[wg_receive-cookie-response]
# "%s: Receiving cookie response from %pISpfsc\n", wg->dev->name, skb
REGEX = wireguard:\s(?<device>[^:]+):\sReceiving\scookie\sresponse\sfrom\s\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?
FORMAT = action::allow class::cookie level::INFO

[wg_receive-handshake-invalid-mac]
# "%s: Invalid MAC of handshake, dropping packet from %pISpfsc\n", wg->dev->name, skb
REGEX = wireguard:\s(?<device>[^:]+):\sInvalid\sMAC\sof\shandshake,\sdropping\spacket\sfrom\s\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?
FORMAT = action::drop class::handshake level::ERROR

[wg_receive-handshake-invalid-initiation]
# "%s: Invalid handshake initiation from %pISpfsc\n", wg->dev->name, skb
REGEX = wireguard:\s(?<device>[^:]+):\sInvalid\shandshake\sinitiation\sfrom\s\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?
FORMAT = action::drop class::handshake level::ERROR

[wg_receive-handshake-initiation]
# "%s: Receiving handshake initiation from peer %llu (%pISpfsc)\n", wg->dev->name, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sReceiving\shandshake\sinitiation\sfrom\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)
FORMAT = action::allow class::handshake level::INFO

[wg_receive-handshake-invalid-response]
# "%s: Invalid handshake response from %pISpfsc\n", wg->dev->name, skb
REGEX = wireguard:\s(?<device>[^:]+):\sInvalid\shandshake\sresponse\sfrom\s\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?
FORMAT = action::drop class::handshake level::ERROR

[wg_receive-handshake-response]
# "%s: Receiving handshake response from peer %llu (%pISpfsc)\n", wg->dev->name, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sReceiving\shandshake\sresponse\sfrom\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)
FORMAT = action::allow class::handshake level::INFO

[wg_receive-keepalive]
# "%s: Receiving keepalive packet from peer %llu (%pISpfsc)\n", dev->name, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sReceiving\skeepalive\spacket\sfrom\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)
FORMAT = action::allow class::keepalive level::INFO

[wg_receive-unallowed-ip]
# "%s: Packet has unallowed src IP (%pISc) from peer %llu (%pISpfsc)\n", dev->name, skb, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sPacket\shas\sunallowed\ssrc\sIP\s\((?<packet_src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\)\sfrom\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)
FORMAT = action::drop class::protocol level::WARN

[wg_receive-not-ip]
# "%s: Packet is neither ipv4 nor ipv6 from peer %llu (%pISpfsc)\n", dev->name, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sPacket\sis\sneither\sipv4\snor\sipv6\sfrom\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)
FORMAT = action::drop class::protocol level::ERROR

[wg_receive-packet-bad-size]
# "%s: Packet has incorrect size from peer %llu (%pISpfsc)\n", dev->name, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sPacket\shas\sincorrect\ssize\sfrom\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)
FORMAT = action::drop class::protocol level::ERROR

[wg_receive-packet-bad-nonce]
# "%s: Packet has invalid nonce %llu (max %llu)\n", peer->device->dev->name, PACKET_CB(skb)->nonce, keypair->receiving_counter.counter
REGEX = wireguard:\s(?<device>[^:]+):\sPacket\shas\sinvalid\snonce\s(?<nonce_counter>\d+)\s\(max\s(?<nonce_counter_max>\d+)\)
FORMAT = action::drop class::protocol level::ERROR

[wg_receive-handshake-dropped]
# "%s: Dropping handshake packet from %pISpfsc\n", wg->dev->name, skb
REGEX = wireguard:\s(?<device>[^:]+):\sDropping\shandshake\spacket\sfrom\s\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?
FORMAT = action::drop class::handshake level::ERROR

## send.c

[wg_send-handshake-initiation]
# "%s: Sending handshake initiation to peer %llu (%pISpfsc)\n", peer->device->dev->name, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sSending\shandshake\sinitiation\sto\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)
FORMAT = action::send class::handshake level::INFO

[wg_send-handshake-response]
# "%s: Sending handshake response to peer %llu (%pISpfsc)\n", peer->device->dev->name, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sSending\shandshake\sresponse\sto\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)
FORMAT = action::send class::handshake level::INFO

[wg_send-cookie-response]
# "%s: Sending cookie response for denied handshake message for %pISpfsc\n", wg->dev->name, initiating_skb
REGEX = wireguard:\s(?<device>[^:]+):\sSending\scookie\sresponse\sfor\sdenied\shandshake\smessage\sfor\s\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?
FORMAT = action::send class::cookie level::INFO

[wg_send-keepalive]
# "%s: Sending keepalive packet to peer %llu (%pISpfsc)\n", peer->device->dev->name, peer->internal_id, &peer->endpoint.addr
REGEX = wireguard:\s(?<device>[^:]+):\sSending\skeepalive\spacket\sto\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)
FORMAT = action::send class::keepalive level::INFO

## socket.c

[wg_socket-no-route]
# "%s: No route to %pISpfsc, error %d\n", wg->dev->name, &endpoint->addr, ret
REGEX = wireguard:\s(?<device>[^:]+):\sNo\sroute\sto\s\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?,\serror\s(?<error_code>\d+)
FORMAT = action::drop class::network level::ERROR

[wg_socket-create-failed]
# "%s: Could not create IPv4 socket\n", wg->dev->name
# "%s: Could not create IPv6 socket\n", wg->dev->name
REGEX = wireguard:\s(?<device>[^:]+):\sCould\snot\screate\s(?<network_protocol>\S+)\ssocket
FORMAT = action::drop class::network level::ERROR

## timers.c

[wg_timers-handshake-give-up]
# "%s: Handshake for peer %llu (%pISpfsc) did not complete after %d attempts, giving up\n", peer->device->dev->name, peer->internal_id, &peer->endpoint.addr, MAX_TIMER_HANDSHAKES + 2
REGEX = wireguard:\s(?<device>[^:]+):\sHandshake\sfor\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)\sdid\snot\scomplete\safter\s(?<handshake_attempt>\d+)\sattempts,\sgiving\sup
FORMAT = action::fail class::handshake level::ERROR

[wg_timers-handshake-timeout]
# "%s: Handshake for peer %llu (%pISpfsc) did not complete after %d seconds, retrying (try %d)\n", peer->device->dev->name, peer->internal_id, &peer->endpoint.addr, REKEY_TIMEOUT, peer->timer_handshake_attempts + 1
REGEX = wireguard:\s(?<device>[^:]+):\sHandshake\sfor\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)\sdid\snot\scomplete\safter\s\d+\sseconds,\sretrying\s\(try\s(?<handshake_attempt>\d+)\)
FORMAT = action::timeout class::handshake level::WARN

[wg_timers-handshake-retry]
# "%s: Retrying handshake with peer %llu (%pISpfsc) because we stopped hearing back after %d seconds\n", peer->device->dev->name, peer->internal_id, &peer->endpoint.addr, KEEPALIVE_TIMEOUT + REKEY_TIMEOUT
REGEX = wireguard:\s(?<device>[^:]+):\sRetrying\shandshake\swith\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\)\sbecause\swe\sstopped\shearing\sback\safter\s\d+\sseconds
FORMAT = action::retry class::handshake level::INFO

[wg_timers-keypair-destroy]
# "%s: Zeroing out all keys for peer %llu (%pISpfsc), since we haven't received a new one in %d seconds\n", peer->device->dev->name, peer->internal_id, &peer->endpoint.addr, REJECT_AFTER_TIME * 3
REGEX = wireguard:\s(?<device>[^:]+):\sZeroing\sout\sall\skeys\sfor\speer\s(?<peer>\d+)\s\(\[?(?<src_ip>(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z:]+))\]?(:(?<src_port>\d+))?(\/(?<src_flowinfo>\d+))?(%(?<src_scope>\d+))?\),\ssince\swe\shaven't\sreceived\sa\snew\sone\sin\s\d+\sseconds
FORMAT = action::destroy class::keypair level::ERROR

## virtio_net.c

[wg_virtio_net-too-much-data]
# "%s: too much data\n", skb->dev->name
REGEX = wireguard:\s(?<device>[^:]+):\stoo\smuch\sdata
FORMAT = action::fail class::network level::ERROR

[wg_virtio_net-short-packet]
# "%s: short packet %i\n", dev->name, len
REGEX = wireguard:\s(?<device>[^:]+):\sshort\spacket
FORMAT = action::fail class::network level::ERROR
